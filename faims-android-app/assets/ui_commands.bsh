import au.org.intersect.faims.android.data.User;
import au.org.intersect.faims.android.ui.form.EntityAttribute;
import au.org.intersect.faims.android.ui.form.RelationshipAttribute;
import java.util.List;
import java.util.Collection;
import au.org.intersect.faims.android.ui.form.NameValuePair;
import android.graphics.Color;
import com.nutiteq.projections.EPSG3857;
import com.nutiteq.components.MapPos;
import com.nutiteq.geometry.Geometry;
import com.nutiteq.geometry.Point;
import com.nutiteq.geometry.Line;
import com.nutiteq.geometry.Polygon;
import com.nutiteq.style.*;

newTabGroup(String label) {
	linker.newTabGroup(label);
}

newTab(String label) {
	linker.newTab(label);
}

showTabGroup(String label){
    linker.showTabGroup(label);
}

showTabGroup(String id, String uuid){
    linker.showTabGroup(id,uuid);
}

showTab(String label) {
	linker.showTab(label);
}

showTab(String id, String uuid) {
	linker.showTab(id, uuid);
}

cancelTabGroup(String id, boolean warn){
	linker.cancelTabGroup(id,warn);
}

cancelTab(String id, boolean warn){
	linker.cancelTab(id,warn);
}

showToast(String message) {
    linker.showToast(message);
}

showAlert(String title, String message, String okCallback, String cancelCallback){
    linker.showAlert(title, message, okCallback, cancelCallback);
}

showWarning(String title, String message) {
	linker.showWarning(title, message);
}

setFieldValue(String ref, Object value){
    linker.setFieldValue(ref, value);
}

setFieldCertainty(String ref, Object value){
    linker.setFieldCertainty(ref, value);
}

setFieldAnnotation(String ref, Object value){
    linker.setFieldAnnotation(ref, value);
}

Object getFieldValue(String ref){
    return linker.getFieldValue(ref);
}

Object getFieldCertainty(String ref){
    return linker.getFieldCertainty(ref);
}

Object getFieldAnnotation(String ref){
    return linker.getFieldAnnotation(ref);
}

String getCurrentTime(){
    return linker.getCurrentTime();
}

onMapEvent(String ref, String clickCallback, selectCallback) {
	linker.bindMapEvent(ref, clickCallback, selectCallback);
}
    
onEvent(String ref, String type, String callback) {
	linker.bindViewToEvent(ref, type, callback);
}

onFocus(String ref, String focusCallback, String blurCallback) {
	linker.bindFocusAndBlurEvent(ref, focusCallback, blurCallback);
}

saveArchEnt(String entity_id, String entity_type, List geo_data, List attributes) {
	return linker.saveArchEnt(entity_id, entity_type, geo_data, attributes);
}

setUser(User user){
	linker.setUser(user);
}

saveRel(String rel_id, String rel_type, List geo_data, List attributes) {
	return linker.saveRel(rel_id, rel_type, geo_data, attributes);
}

addReln(String entity_id, String rel_id, String verb) {
	linker.addReln(entity_id, rel_id, verb);
}

createAttributeList() {
	return new ArrayList();
}

createEntityAttribute(String name, String text, String vocab, String measure, String certainty) {
	EntityAttribute attribute = new EntityAttribute();
	attribute.setName(name);
	attribute.setText(text);
	attribute.setVocab(vocab);
	attribute.setMeasure(measure);
	attribute.setCertainty(certainty);
	return attribute;
}

createRelationshipAttribute(String name, String text, String vocab) {
	RelationshipAttribute attribute = new RelationshipAttribute();
	attribute.setName(name);
	attribute.setText(text);
	attribute.setVocab(vocab);
	return attribute;
}

populateDropDown(String ref, Collection values){
    linker.populateDropDown(ref, values);
}

populateCheckBoxGroup(String ref, Collection values) {
	linker.populateList(ref, values);
}

populateList(String ref, Collection values){
	linker.populateList(ref, values);
}

populatePictureGallery(String ref, Collection values){
	linker.populatePictureGallery(ref, values);
}

populateRadioGroup(String ref, Collection values) {
	linker.populateList(ref, values);
}

Object fetchArchEnt(String id){
    return linker.fetchArchEnt(id);
}

Object fetchRel(String id){
    return linker.fetchRel(id);
}

Object fetchOne(String query){
    return linker.fetchOne(query);
}

Collection fetchAll(String query){
    return linker.fetchAll(query);
}

String getListItemValue() {
	return _list_item_value;
}

goBack(){
    linker.goBack();
}

setGPSUpdateInterval(int seconds){
	linker.setGpsUpdateInterval(seconds);
}

Object getGPSPosition(){
	return linker.getGPSPosition();
}

Object getGPSEstimatedAccuracy(){
	return linker.getGPSEstimatedAccuracy();
}

Object getGPSHeading(){
	return linker.getGPSHeading();
}

Object getGPSPosition(String gps){
	return linker.getGPSPosition(gps);
}

Object getGPSEstimatedAccuracy(String gps){
	return linker.getGPSEstimatedAccuracy(gps);
}

Object getGPSHeading(String gps){
	return linker.getGPSHeading(gps);
}

showRasterMap(String ref, String filename) {
	linker.showRasterMap(ref, filename);
}

setMapFocusPoint(String ref, float longitude, float latitude) {
	linker.setMapFocusPoint(ref, longitude, latitude);
}

setMapRotation(String ref, float rotation) {
	linker.setMapRotation(ref, rotation);
}

setMapZoom(String ref, float zoom) {
	linker.setMapZoom(ref, zoom);
}

setMapTilt(String ref, float tilt) {
	linker.setMapTilt(ref, tilt);
}

showVectorLayer(String ref, String filename, StyleSet pointStyleSet, StyleSet lineStyleSet, StyleSet polygonStyleSet) {
	linker.showVectorLayer(ref, filename, pointStyleSet, lineStyleSet, polygonStyleSet);
}

showSpatialLayer(String ref, String filename, String tableName, String labelName, StyleSet pointStyleSet, StyleSet lineStyleSet, StyleSet polygonStyleSet) {
	linker.showSpatialLayer(ref, filename, tableName, labelName, pointStyleSet, lineStyleSet, polygonStyleSet);
}

clearVectorLayer(String ref, int layerId) {
	linker.clearVectorLayer(ref, layerId);
}

centerOnCurrentPosition(String ref){
	linker.centerOnCurrentPosition(ref);
}

createVectorLayer(String ref) {
	return linker.createVectorLayer(ref);
}

setVectorLayerVisible(String ref, int layerId, boolean visible) {
	linker.setVectorLayerVisible(ref, layerId, visible);
}

getMapPointClicked() {
	return _map_point_clicked;
}

drawPoint(String ref, int layerId, MapPos point, StyleSet styleSet) {
	linker.drawPoint(ref, layerId, point, styleSet);
}

drawLine(String ref, int layerId, List points, StyleSet styleSet) {
	linker.drawLine(ref, layerId, points, styleSet);
}

drawPolygon(String ref, int layerId, List points, StyleSet styleSet) {
	linker.drawPolygon(ref, layerId, points, styleSet);
}

clearGeometry(String ref, int layerId, int geomId) {
	linker.clearGeometry(ref, layerId, geomId);
}

clearGeometryList(String ref, int layerId, List geomList) {
	linker.clearGeometryList(ref, layerId, geomList);
}

createPoint(float lon, float lat) {
	return new MapPos(lon, lat);
}

createPoint(double lon, double lat) {
	return new MapPos((float) lon, (float) lat);
}

getGeometryList(String ref, int layerId) {
	return linker.getGeometryList(ref, layerId);
}

getGeometry(String ref, int layerId, int geomId) {
	return linker.getGeometry(ref, layerId, geomId);
}

drawGeometry(String ref, int layerId, Geometry geom, StyleSet styleSet) {
	if (geom instanceof Point) {
		return drawPoint(ref, layerId, ((Point) geom).getMapPos(), styleSet);
	} else if (geom instanceof Line) {
		return drawLine(ref, layerId, ((Line) geom).getVertexList(), styleSet);
	} else if (geom instanceof Polygon) {
		return drawPolygon(ref, layerId, ((Polygon) geom).getVertexList(), styleSet);
	}
}

createPointStyle(int color, float size, float pickSize) {
	return linker.createPointStyle(color, size, pickSize);
}

createLineStyle(int color, float width, float pickWidth, PointStyle pointStyle) {
	if (pointStyle == null)
		return linker.createLineStyle(color, width, pickWidth);
	return linker.createLineStyle(color, width, pickWidth, pointStyle);
}

createPolygonStyle(int color, LineStyle lineStyle) {
	if (lineStyle == null)
		return linker.createPolygonStyle(color);
	return linker.createPolygonStyle(color, lineStyle);
}

createStyleSet(int minZoom, Style style) {
	return linker.createStyleSet(minZoom, style);
}

addStyleToSet(StyleSet styleSet, int minZoom, Style style) {
	styleSet.setZoomStyle(minZoom, style);
}

lockMapView(String ref, boolean lock) {
	linker.lockMapView(ref, lock);
}

drawGeometryOverlay(String ref, int geomId) {
	linker.drawGeometryOverlay(ref, geomId);
}

replaceGeometryOverlay(String ref, int geomId) {
	linker.replaceGeometryOverlay(ref, geomId);
}

clearGeometryOverlay(String ref) {
	linker.clearGeometryOverlay(ref);
}

getMapGeometrySelected() {
	return _map_geometry_selected;
}

pushDatabaseToServer(String callback) {
	linker.pushDatabaseToServer(callback);
}

pullDatabaseFromServer(String callback) {
	linker.pullDatabaseFromServer(callback);
}

setSyncEnabled(boolean value) {
	linker.setSyncEnabled(value);
}

onSyncEvent(String startCallback, String successCallback, String failureCallback) {
	linker.addSyncListener(startCallback, successCallback, failureCallback);
}

setSyncMinInterval(float value) {
	linker.setSyncMinInterval(value);
}

setSyncMaxInterval(float value) {
	linker.setSyncMaxInterval(value);
}

setSyncDelay(float value) {
	linker.setSyncDelay(value);
}

String getProjectName(){
	return linker.getProjectName();
}

String getProjectId(){
	return linker.getProjectId();
}

String getProjectSeason(){
	return linker.getProjectSeason();
}

String getProjectDescription(){
	return linker.getProjectDescription();
}

String getPermitNo(){
	return linker.getPermitNo();
}

String getPermitHolder(){
	return linker.getPermitHolder();
}

String getContactAndAddress(){
	return linker.getContactAndAddress();
}

String getParticipants(){
	return linker.getParticipants();
}

getLastSelectedFilename() {
	return _last_selected_filename;
}

getLastSelectedFilepath() {
	return _last_selected_filepath;
}

showFileBrowser(String callback) {
	linker.showFileBrowser(callback);
}

setFileSyncEnabled(boolean enabled) {
	linker.setFileSyncEnabled(enabled);
}