/*** MISC ***/

AttributeDef(String name, String type, String ref) {
	this.name = name;
	this.type = type;
	this.ref = ref;
	return this;
}
	
AttributeDef(String name, String type, String ref, ArrayList loadedFiles) {
	this.name = name;
	this.type = type;
	this.ref = ref;
	this.loadedFiles = loadedFiles;
	return this;
}

getLoadedFileName(filename) {
	if (filename.indexOf("_") > 0) {
		filename = filename.substring(filename.indexOf("_") + 1);
	}
	return filename;
}

hasFile(files, filename) {
	for (String f : files) {
		if (getLoadedFileName(f).equals(getLoadedFileName(filename))) return true;
	}
	return false;
}

saveFiles(loadedFiles, files, type, attributes) {
	if (files == null || "".equals(files)) return;
	if (files.size() == 1 && "None".equals(files.get(0))) return;

	// delete attributes that are not included
	for (String file : loadedFiles) {
		if (!hasFile(files, file)) {
			attributes.add(createEntityAttribute(type, file, null, null, null, true));
		}
	}
	// add new attributes that are included
	for (String file : files) {
		String filename = null;
		if (!hasFile(loadedFiles, file)) {
			filename = attachFile(file, true);
		} else {
			for (String f : loadedFiles) {
				if (getLoadedFileName(f).equals(getLoadedFileName(file))) {
					filename = f;
					break;
				}
			}
		}
		attributes.add(createEntityAttribute(type, filename, null, null, null, true));
	}
}

/*** USER ***/

getDefaultUsersList() {
    fetchOne("delete from user;");
    fetchOne("insert into user values(1, 'Adela', 'Sobotkova');");
    fetchOne("insert into user values(2, 'Brian', 'Ballsun-Stanton');");
    fetchOne("insert into user values(3, 'Oliver', 'Brown');");
    fetchOne("insert into user values(4, 'Matthew', 'Kelly');");
    fetchOne("insert into user values(5, 'Penny', 'Crook');");
    fetchOne("insert into user values(6, 'Shawn', 'Ross');");
    fetchOne("insert into user values(7, 'Anita', 'Yousif');");
    users = fetchAll("select userid, fname ||' ' || lname from user");
    return users;
}

usersList = getDefaultUsersList();


populateListForUsers(){
    populateDropDown("user/tab1/users", getDefaultUsersList());
    populateList("user/tab1/devices", fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = 'Device' "));
}

populateListForUsers();

populateListForEntityTypes() {
	ArrayList list = new ArrayList();
	list.add("Structure");
	list.add("Wall");
	list.add("Doorway");
	list.add("Feature");
	list.add("Special Find");
	list.add("Lichen");
	list.add("Surface Collection");
	list.add("Canal");
	populateDropDown("control/map/entityType", list);
}

populateListForEntityTypes();

String username = "";
String device = "";

login(){

    if (getFieldValue("user/tab1/devices") != ""){
    Object userResult = fetchOne("select userid,fname,lname from user where userid='" + getFieldValue("user/tab1/users") + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2));
    deviceResult = fetchOne("select vocabname from vocabulary where vocabid = '"+getFieldValue("user/tab1/devices")+"';");
    device = deviceResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");}
    else {
        showWarning("Logic Error", "Please Choose Device");

    }
}

onEvent("user/tab1/login", "click", "login()");

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

makeGallery(String attrib){
    Object a = fetchAll("select vocabid, vocabname, pictureurl from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"'");
    return a;
}

newStructure(){
	structure_id = null;
	
	structureFiles = getNoneList();
	structureSketches = getNoneList();
	structurePictures = new ArrayList();
	structureVideos = new ArrayList();
	structureAudios = new ArrayList();
	
	if (structureFiles.isEmpty()) {
		structureFiles = getNoneList();
	}
	
	if (structureSketches.isEmpty()) {
		structureSketches = getNoneList();
	}

    newTabGroup("structure");
    
    populateCameraPictureGallery("structure/final/PhotoGallery", structurePictures);
    populateVideoGallery("structure/final/VideoGallery", structureVideos);
    populateAudioList("structure/attachment/AudioList",structureAudios);
    populateCheckBoxGroup("structure/final/sketchfilelist", structureSketches);
    populateCheckBoxGroup("structure/final/filelist", structureFiles);
    
    populateDropDown("structure/info/Preservation", makeVocab("Preservation"));
    populateDropDown("structure/info/Form", makeVocab("Form"));
    populateList("structure/component/WallsInternalPartition", makeVocab("WallsInternalPartition"));
    populateList("structure/construction/ConstructionQuality", makeVocab("ConstructionQuality"));
    populateList("structure/construction/ConstructionPeriod", makeVocab("ConstructionPeriod"));
    populateList("structure/construction/Modifications", makeVocab("Modifications"));
    populateDropDown("structure/construction/PrincipalFunction", makeVocab("PrincipalFunction"));
    populateDropDown("structure/construction/Classification", makeVocab("Classification"));
    populateList("structure/finalObservations/StuccoInterior", makeVocab("StuccoInterior"));
    populateList("structure/finalObservations/StuccoExterior", makeVocab("StuccoExterior"));
    populateDropDown("structure/finalObservations/RoofForm", makeVocab("RoofForm"));
    
    setFieldValue("structure/info/Timestamp", getCurrentTime());
    setFieldValue("structure/info/Author", username);
    setFieldValue("structure/info/Device", device);
}


newCorner(){
    newTabGroup("corner");
    populateDropDown("corner/cornerDetail/CornerExteriorForm", makeVocab("CornerExteriorForm"));
    populateDropDown("corner/cornerDetail/CornerInteriorForm", makeVocab("CornerInteriorForm"));
    populatePictureGallery("corner/cornerDetail/MasonryType", makeGallery("MasonryType"));
    populateList("corner/cornerDetail/InkaMasonry", makeVocab("InkaMasonry"));

}

newStructureWall(){
    newTabGroup("wall");
    populatePictureGallery("wall/structureWall/MasonryType", makeGallery("MasonryType"));
    populateList("wall/structureWall/InkaMasonry", makeVocab("InkaMasonry"));
    populateList("wall/structureWall/Gable", makeVocab("Gable"));
    populateList("wall/structureWall/WallHeightPreservation", makeVocab("WallHeightPreservation"));
    
}

newDoorway(){
    newTabGroup("doorway");
    doorwaypictures = new ArrayList();
    populateCameraPictureGallery("doorway/doorDetail/PhotoGallery", doorwaypictures);
    populateList("doorway/doorDetail/DoorMasonry", makeVocab("DoorMasonry"));
    populateList("doorway/doorDetail/DoorHeightPreservation", makeVocab("DoorHeightPreservation"));
    populateList("doorway/doorDetail/DoorPosition", makeVocab("DoorPosition"));

}
newNiche(){
    newTabGroup("niche");
    populateList("niche/nicheDetail/NicheForm", makeVocab("NicheForm"));
    populateList("niche/nicheDetail/NicheHeightPreservation", makeVocab("NicheHeightPreservation"));
    populateList("niche/nicheDetail/NicheWidthLoc", makeVocab("NicheWidthLoc"));
    populateList("niche/nicheDetail/NicheAltar", makeVocab("NicheAltar"));

}
newWindow(){
    newTabGroup("window");
    populateList("window/windowDetail/WindowHeightPreservation", makeVocab("WindowHeightPreservation"));
}
newLichen(){
    newTabGroup("lichen");
    lichenpictures = new ArrayList();
    populateCameraPictureGallery("lichen/lichenDetail/PhotoGallery", lichenpictures);
    populateList("lichen/lichenDetail/Substrate", makeVocab("Substrate"));
    populateList("lichen/lichenDetail/Aspect", makeVocab("Aspect"));
    populateList("lichen/lichenDetail/InsideOutside", makeVocab("InsideOutside"));

}

newFreeWall(){
    newTabGroup("freeWall");
    populatePictureGallery("freeWall/freeWallDetail/MasonryType", makeGallery("MasonryType"));
    populateList("freeWall/freeWallDetail/WallPreservation", makeVocab("WallPreservation"));
    populateList("freeWall/freeWallDetail/WallHeightPreservation", makeVocab("WallHeightPreservation"));

}

newFeature(){
    newTabGroup("feature");
    featurepictures = new ArrayList();
    populateCameraPictureGallery("feature/featureDetail/PhotoGallery", featurepictures);
}

newSpecialFind(){
    newTabGroup("specialFind");
    specialFindpictures = new ArrayList();
    populateCameraPictureGallery("specialFind/findDetail/PhotoGallery", specialFindpictures);
    populateList("specialFind/findDetail/Type", makeVocab("Type"));

}

newSurfaceCollection(){
    newTabGroup("surfaceCollection");
    populateList("surfaceCollection/description/SurfaceCollectionContext", makeVocab("SurfaceCollectionContext"));
    populateList("surfaceCollection/material/DiagnosticsPresent", makeVocab("DiagnosticsPresent"));
    populateList("surfaceCollection/material/MaterialDensity", makeVocab("MaterialDensity"));
    populateList("surfaceCollection/material/LotLabPriority", makeVocab("LotLabPriority"));

}

newLot(){
    newTabGroup("lot");
    populateList("lot/lot/Material", makeVocab("Material"));

}

newCanal(){
    newTabGroup("canal");
    canalpictures = new ArrayList();
    populateCameraPictureGallery("canal/canalDetail/PhotoGallery", canalpictures);
}

newEntity() {
	
	type = getFieldValue("control/map/entityType");
	if (type == null || "".equals(type)) return;
	
	if ("Structure".equals(type)) {
		newStructure();
	} else if ("Wall".equals(type)) {
		newFreeWall();
	} else if ("Doorway".equals(type)) {
		newDoorway();
	} else if ("Feature".equals(type)) {
		newFeature();
	} else if ("Special Find".equals(type)) {
		newSpecialFind();
	} else if ("Lichen".equals(type)) {
		newLichen();
	} else if ("Surface Collection".equals(type)) {
		newSurfaceCollection();
	} else if ("Canal".equals(type)) {
		newCanal();
	}

}

onEvent("control", "show", "updateAll()");
onEvent("control/map/create", "click", "newEntity()");
onEvent("control/gps/connectexternal", "click", "startExternalGPS()");
onEvent("control/gps/connectinternal", "click", "startInternalGPS()");
onEvent("control/gps/startsync", "click", "startSync()");
onEvent("control/gps/stopsync", "click", "stopSync()");
onSyncEvent("syncStarted()", "syncCompleted()", "syncFailed()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);
setGPSUpdateInterval(4);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);

}

syncStarted() {
    //showToast("starting sync");
}

syncCompleted() {
    //showToast("completed sync");
    updateAll();
}

syncFailed() {
    //showToast("failed sync");
}

onEvent("structure/component/AddCorner", "click", "newCorner()");
onEvent("structure/component/AddWall", "click", "newStructureWall()");
onEvent("structure/component/AddDoorway", "click", "newDoorway()");
onEvent("structure/component/AddNiche", "click", "newNiche()");
onEvent("wall/structureWall/NewNiche", "click", "newNiche()");
onEvent("wall/structureWall/NewWindow", "click", "newWindow()");
onEvent("wall/structureWall/NewLichen", "click", "newLichen()");
onEvent("corner/cornerDetail/AddNiche", "click", "newNiche()");
onEvent("surfaceCollection/material/Lot", "click", "newLot()");

/*** CORNER ***/

ArrayList cornerPictures = new ArrayList();

takeCornerPicture() {
    openCamera("OnCornerPictureTaken()");
}

OnCornerPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    cornerPictures.add(pictureFilepath);
    populateCameraPictureGallery("corner/cornerDetail/PhotoGallery", cornerPictures);
}

onEvent("corner/cornerDetail/CornerPhotos", "click", "takeCornerPicture()");

/*** NICHE ***/

ArrayList nichePictures = new ArrayList();

takeNichePicture() {
    openCamera("OnNichePictureTaken()");
}

OnNichePictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    nichePictures.add(pictureFilepath);
    populateCameraPictureGallery("niche/nicheDetail/PhotoGallery", nichePictures);
}

onEvent("niche/nicheDetail/NichePhotos", "click", "takeNichePicture()");

/*** CANAL ***/

ArrayList canalPictures = new ArrayList();

takecanalPicture() {
    openCamera("OncanalPictureTaken()");
}

OncanalPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    canalPictures.add(pictureFilepath);
    populateCameraPictureGallery("canal/canalDetail/PhotoGallery", canalPictures);
}

onEvent("canal/canalDetail/Photos", "click", "takecanalPicture()");

/*** WINDOW ***/

ArrayList windowPictures = new ArrayList();

takeWindowPicture() {
    openCamera("OnWindowPictureTaken()");
}

OnWindowPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    windowPictures.add(pictureFilepath);
    populateCameraPictureGallery("window/windowDetail/PhotoGallery", windowPictures);
}

onEvent("window/windowDetail/WindowPhotos", "click", "takeWindowPicture()");

/*** SPECIAL FIND ***/

ArrayList specialFindPictures = new ArrayList();

takespecialFindPicture() {
    openCamera("OnspecialFindPictureTaken()");
}

OnspecialFindPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    specialFindPictures.add(pictureFilepath);
    populateCameraPictureGallery("specialFind/findDetail/PhotoGallery", specialFindPictures);
}

onEvent("specialFind/findDetail/Photos", "click", "takespecialFindPicture()");

/*** FEATURES ***/

ArrayList featurePictures = new ArrayList();

takeFeaturePicture() {
    openCamera("OnFeaturePictureTaken()");
}

OnFeaturePictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    featurePictures.add(pictureFilepath);
    populateCameraPictureGallery("feature/featureDetail/PhotoGallery", featurePictures);
}

onEvent("feature/featureDetail/Photos", "click", "takeFeaturePicture()");

/*** FREEWALL ***/

ArrayList freewallPictures = new ArrayList();

takeFreewallPicture() {
    openCamera("OnFreewallPictureTaken()");
}

OnFreewallPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    freewallPictures.add(pictureFilepath);
    populateCameraPictureGallery("freeWall/freeWallDetail/PhotoGallery", freewallPictures);
}

onEvent("freeWall/freeWallDetail/Photos", "click", "takeFreewallPicture()");

/*** DOORWAY ***/

ArrayList doorwayPictures = new ArrayList();

takeDoorwayPicture() {
    openCamera("OnDoorwayPictureTaken()");
}

OnDoorwayPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    doorwayPictures.add(pictureFilepath);
    populateCameraPictureGallery("doorway/doorDetail/PhotoGallery", doorwayPictures);
}

takeDoorywayPoint(){
    location = getGPSPosition();
    if (location == null) {
        showWarning("Logic Error", "No GPS Signal");
    } else {
        longitude = location.getLongitude();
        latitude = location.getLatitude();

        setFieldValue("doorway/doorDetail/GPSLong", longitude);
        setFieldValue("doorway/doorDetail/GPSLat", latitude);

        //point = createPoint(longitude, latitude);

        // TODO make this reflect db layer when saving with db.
        //lastPointId = drawPoint("tabgroup1/tab1/map", entityLayerId, point, gpsPointStyle(Color.RED));

    }
}
onEvent("doorway/doorDetail/DoorPhotos", "click", "takeDoorwayPicture()");
onEvent("doorway/doorDetail/TakePoint", "click", "takeDoorywayPoint()");

/*** LICHEN ***/

ArrayList lichenPictures = new ArrayList();

takeLichenPicture() {
    openCamera("OnLichenPictureTaken()");
}

OnLichenPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    lichenPictures.add(pictureFilepath);
    populateCameraPictureGallery("lichen/lichenDetail/PhotoGallery", lichenPictures);
}

onEvent("lichen/lichenDetail/Photos", "click", "takeLichenPicture()");

takeLichenPoint(){
    location = getGPSPosition();
    if (location == null) {
        showWarning("Logic Error", "No GPS Signal");
    } else {
        longitude = location.getLongitude();
        latitude = location.getLatitude();

        setFieldValue("lichen/lichenDetail/GPSLong", longitude);
        setFieldValue("lichen/lichenDetail/GPSLat", latitude);

        //point = createPoint(longitude, latitude);

        // TODO make this reflect db layer when saving with db.
        //lastPointId = drawPoint("tabgroup1/tab1/map", entityLayerId, point, gpsPointStyle(Color.RED));

    }
}

onEvent("lichen/lichenDetail/TakePoint", "click", "takeLichenPoint()");

/*** STRUCTURE WALL ***/

ArrayList structureWallPictures = new ArrayList();

takeStructWallPicture() {
    openCamera("OnStructWallPictureTaken()");
}

OnStructWallPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    structureWallPictures.add(pictureFilepath);
    populateCameraPictureGallery("wall/structureWall/PhotoGallery", structureWallPictures);
}

onEvent("wall/structureWall/WallPhotos", "click", "takeStructWallPicture()");

/*** STRUCTURE ***/

getNoneList() {
	list = new ArrayList();
	list.add("None");
	return list;
}

ArrayList structureFiles = getNoneList();
ArrayList structureSketches = getNoneList();
ArrayList structurePictures = new ArrayList();
ArrayList structureVideos = new ArrayList();
ArrayList structureAudios = new ArrayList();

attachFile() {
    showFileBrowser("setFilename()");
}

setFilename() {
	if (structureFiles.get(0).equals("None")) {
		structureFiles.clear();
	}

	structureFiles.add(getLastSelectedFilepath());
	populateCheckBoxGroup("structure/final/filelist", structureFiles);
}

attachSketchFile() {
    showFileBrowser("setSketchFilename()");
}

setSketchFilename() {
	if (structureSketches.get(0).equals("None")) {
		structureSketches.clear();
	}

    structureSketches.add(getLastSelectedFilepath());
	populateCheckBoxGroup("structure/final/sketchfilelist", structureSketches);
}

takePicture() {
    openCamera("OnPictureTaken()");
}

OnPictureTaken() {
    pictureFilepath = getLastPictureFilePath();
    structurePictures.add(pictureFilepath);
    populateCameraPictureGallery("structure/final/PhotoGallery", structurePictures);
}

takeVideo() {
    openVideo("OnVideoTaken()");
}

OnVideoTaken() {
    videoFilepath = getLastVideoFilePath();
    structureVideos.add(videoFilepath);
    populateVideoGallery("structure/final/VideoGallery", structureVideos);
}

recordAudio(){
    recordAudio("OnAudioRecorded()");
}

OnAudioRecorded(){
    audioFilePath = getLastAudioFilePath();
    structureAudios.add(audioFilePath);
    populateAudioList("structure/attachment/AudioList", structureAudios);
}

onEvent("structure/final/AddAttachment", "click", "attachFile()");
onEvent("structure/final/Sketch", "click", "attachSketchFile()");
onEvent("structure/final/Photo", "click", "takePicture()");
onEvent("structure/final/Video", "click", "takeVideo()");
onEvent("structure/final/Audio", "click", "recordAudio()");

onEvent("structure/final/Update", "click", "updateStructure(structure_id)");
onEvent("structure/final/SaveAndClose", "click", "saveStructureAndClose()");

String structure_id = null;

saveEntity(entityId, entityType, attributeDefs, geoData) {
	
    List attributes = createAttributeList();
    
    for (Object def : attributeDefs) {
    	
    	// name, text, vocab, measure, certainty
    	if ("freetext".equals(def.type)) {
    		attributes.add(createEntityAttribute(def.name, getFieldValue(def.ref), null, null, getFieldCertainty(def.ref)));
    	} else if ("measure".equals(def.type)) {
    		attributes.add(createEntityAttribute(def.name, getFieldAnnotation(def.ref), null, getFieldValue(def.ref), getFieldCertainty(def.ref)));
    	} else if ("vocab".equals(def.type)) {
    		attributes.add(createEntityAttribute(def.name, getFieldAnnotation(def.ref), getFieldValue(def.ref), null, getFieldCertainty(def.ref)));
    	} else if ("files".equals(def.type)) {
    		saveFiles(def.loadedFiles, getFieldValue(def.ref), def.name, attributes);
    	}
    	
    }
    
    return saveArchEnt(entityId, entityType, geoData, attributes);
}

saveStructureAndClose(){
    structure_id = updateStructure(null);
    cancelTabGroup("structure", false);
}

updateStructure(id){
    if (id == null || "".equals(id)) id = null;
    
    structureFiles = getNoneList();
	structureSketches = getNoneList();
	structurePictures = new ArrayList();
	structureVideos = new ArrayList();
	structureAudios = new ArrayList();

	ArrayList loadedSketches = new ArrayList();
	ArrayList loadedFiles = new ArrayList();
	ArrayList loadedPictures = new ArrayList();
	ArrayList loadedVideos = new ArrayList();
	ArrayList loadedAudios = new ArrayList();
	
	if (structure_id != null) {
		entity = fetchArchEnt(structure_id);
		for (Object attribute : entity.getAttributes()) {
			System.out.println(attribute.toString());
			if ("Photo".equals(attribute.getName())) {
				loadedPictures.add(attribute.getText());
			} else if ("sketchfilename".equals(attribute.getName())) {
				loadedSketches.add(attribute.getText());
			} else if ("filename".equals(attribute.getName())) {
				loadedFiles.add(attribute.getText());
			} else if ("video".equals(attribute.getName())) {
				loadedVideos.add(attribute.getText());
			} else if ("audio".equals(attribute.getName())) {
				loadedAudios.add(attribute.getText());
			}
		}
	}
    
   	Object[] attributeDefs = new Object[] {
    	AttributeDef("ArchaeologicalElementID", "freetext", "structure/info/ArchaeologicalElementID"),
    	AttributeDef("Description", "freetext", "structure/info/Description"),
    	AttributeDef("Timestamp", "freetext", "structure/info/Timestamp"),
    	AttributeDef("Author", "freetext" , "structure/info/Author"),
    	AttributeDef("Device", "freetext", "structure/info/Device"),
    	AttributeDef("Form", "vocab", "structure/info/Form"),
    	AttributeDef("FormDescription", "freetext", "structure/info/FormDescription"),
    	AttributeDef("ConstructionPeriod", "vocab", "structure/construction/ConstructionPeriod"),
    	AttributeDef("ConstructionPeriodDescription", "freetext", "structure/construction/ConstructionPeriodDescription"),
    	AttributeDef("Modifications", "vocab", "structure/construction/Modifications"),
    	AttributeDef("ModificationDescription", "freetext", "structure/construction/ModificationDescription"),
    	AttributeDef("PrincipalFunction", "vocab", "structure/construction/PrincipalFunction"),
    	AttributeDef("PrincipalFunctionDescription", "freetext", "structure/construction/PrincipalFunctionDescription"),
    	AttributeDef("Classification", "vocab", "structure/construction/Classification"),
    	AttributeDef("ConstructionQuality", "vocab", "structure/construction/ConstructionQuality"),
    	AttributeDef("WallsTotalCount", "measure", "structure/component/WallsTotalCount"),
    	AttributeDef("WallsGabledCount", "measure", "structure/component/WallsGabledCount"),
    	AttributeDef("WallsInternalPartition", "vocab", "structure/component/WallsInternalPartition"),
    	AttributeDef("PartitionDescription", "freetext", "structure/component/PartitionDescription"),
    	AttributeDef("StuccoInterior", "vocab", "structure/finalObservations/StuccoInterior"),
    	AttributeDef("StuccoExterior", "vocab", "structure/finalObservations/StuccoExterior"),
    	AttributeDef("WindowCount", "measure", "structure/component/WindowCount"),
    	AttributeDef("DoorwayCount", "measure", "structure/component/DoorwayCount"),
    	AttributeDef("NicheCount", "measure", "structure/component/NicheCount"),
    	AttributeDef("FloorRemainsDescription", "freetext", "structure/finalObservations/FloorRemainsDescription"),
    	AttributeDef("RoofForm", "vocab", "structure/finalObservations/RoofForm"),
    	AttributeDef("LongAxis", "measure", "structure/finalObservations/LongAxis"),
    	AttributeDef("ShortAxis", "measure", "structure/finalObservations/ShortAxis"),
    	AttributeDef("Diameter", "measure", "structure/finalObservations/Diameter"),
    	AttributeDef("Preservation", "vocab", "structure/info/Preservation"),
    	AttributeDef("PreservationDescription", "freetext", "structure/info/PreservationDescription"),
    	AttributeDef("SurfaceCondition", "freetext", "structure/finalObservations/SurfaceCondition"),
    	AttributeDef("ModernUse", "freetext", "structure/finalObservations/ModernUse"),
    	AttributeDef("Disturbances", "vocab", "structure/finalObservations/Disturbances"),
    	AttributeDef("OtherArchitecturalDetails", "freetext", "structure/finalObservations/OtherArchitecturalDetails"),
    	AttributeDef("Photo", "files", "structure/final/PhotoGallery", loadedPictures),
    	AttributeDef("sketchfilename", "files", "structure/final/sketchfilelist", loadedSketches),
    	AttributeDef("filename", "files", "structure/final/filelist", loadedFiles),
    	AttributeDef("video", "files", "structure/final/VideoGallery", loadedVideos),
    	AttributeDef("audio", "files", "structure/attachment/AudioList", loadedAudios)
    	};
    
    return saveEntity(structure_id, "Structure", attributeDefs, null); 
}

/*** LOAD ***/

updateAll(){
	Object structure = fetchEntityList("Structure");
	Object wall = fetchEntityList("Wall");
	Object doorway = fetchEntityList("Doorway");
	Object feature = fetchEntityList("Feature");
	Object specialFind = fetchEntityList("SpecialFind");
	Object lichen = fetchEntityList("Lichen");
	Object surfaceCollection = fetchEntityList("SurfaceCollection");
	Object lot = fetchEntityList("Lot");
	populateDropDown("control/data/structureList", structure);
	populateDropDown("control/data/wallList", wall);
	populateDropDown("control/data/doorwayList", doorway);
	populateDropDown("control/data/featureList", feature);
	populateDropDown("control/data/specialFindList", specialFind);
	populateDropDown("control/data/lichenList", lichen);
	populateDropDown("control/data/surfaceCollectionList", surfaceCollection);
	populateDropDown("control/data/lotList", lot);
}

loadStructure() {
	structure_id = getFieldValue("control/data/structureList");
	
	if (structure_id == null || "".equals(structure_id)) return;
	newStructure();
	
	showTabGroup("structure", structure_id);
	loadStructureFileAttributes(structure_id);
}

loadStructureFileAttributes(id){
	structureFiles = new ArrayList();
	structureSketches = new ArrayList();
	structurePictures = new ArrayList();
	structureVideos = new ArrayList();
	structureAudios = new ArrayList();
	archEntity = fetchArchEnt(id);
	entityAttributes = archEntity.getAttributes();
	for(EntityAttribute attr : entityAttributes){
		if("file".equals(attr.getType())){
			if(!attr.isDeleted()){
				if("Photo".equals(attr.getName())){
					structurePictures.add(attr.getText());
				}else if("video".equals(attr.getName())){
					structureVideos.add(attr.getText());
				}else if("audio".equals(attr.getName())){
					structureAudios.add(attr.getText());
				}else if ("sketchfilename".equals(attr.getName())) {
					structureSketches.add(attr.getText());
				}else if ("filename".equals(attr.getName())) {
					structureFiles.add(attr.getText());
				}
			}
		}
	}
	
	if (structureFiles.isEmpty()) {
		structureFiles = getNoneList();
	}
	
	if (structureSketches.isEmpty()) {
		structureSketches = getNoneList();
	}
	
    populateCameraPictureGallery("structure/final/PhotoGallery", structurePictures);
    populateVideoGallery("structure/final/VideoGallery", structureVideos);
    populateAudioList("structure/attachment/AudioList",structureAudios);
    populateCheckBoxGroup("structure/final/sketchfilelist", structureSketches);
    populateCheckBoxGroup("structure/final/filelist", structureFiles);
}

loadWall() {

	wall_id = getFieldValue("control/data/wallList");
	
	if (wall_id == null || "".equals(wall_id)) return;
	newFreeWall();
	
	showTabGroup("freeWall", wall_id);
}

loadDoorWay() {

	doorway_id = getFieldValue("control/data/doorwayList");
	
	if (doorway_id == null || "".equals(doorway_id)) return;
	newDoorway();
	
	showTabGroup("doorway", doorway_id);
	loadDoorwayFileAttributes(doorway_id);
}

loadDoorwayFileAttributes(id){
	doorwaypictures = new ArrayList();
	archEntity = fetchArchEnt(id);
	entityAttributes = archEntity.getAttributes();
	for(EntityAttribute attr : entityAttributes){
		if("file".equals(attr.getType())){
			if(!attr.isDeleted()){
				if("DoorPhotos".equals(attr.getName())){
					doorwaypictures.add(attr.getText());
				}
			}
		}
	}
    populateCameraPictureGallery("doorway/doorDetail/PhotoGallery", doorwaypictures);
}

loadFeature() {

	feature_id = getFieldValue("control/data/featureList");
	
	if (feature_id == null || "".equals(feature_id)) return;
	newFeature();
	
	showTabGroup("feature", feature_id);
	loadFeatureFileAttributes(feature_id);
}

loadFeatureFileAttributes(id){
	featurepictures = new ArrayList();
	archEntity = fetchArchEnt(id);
	entityAttributes = archEntity.getAttributes();
	for(EntityAttribute attr : entityAttributes){
		if("file".equals(attr.getType())){
			if(!attr.isDeleted()){
				if("Photos".equals(attr.getName())){
					featurepictures.add(attr.getText());
				}
			}
		}
	}
    populateCameraPictureGallery("feature/featureDetail/PhotoGallery", featurepictures);
}

loadSpecialFind() {

	special_find_id = getFieldValue("control/data/specialFindList");
	
	if (special_find_id == null || "".equals(special_find_id)) return;
	newSpecialFind();
	
	showTabGroup("specialFind", special_find_id);
	loadSpecialFindFileAttributes(special_find_id);
}

loadSpecialFindFileAttributes(id){
	specialFindpictures = new ArrayList();
	archEntity = fetchArchEnt(id);
	entityAttributes = archEntity.getAttributes();
	for(EntityAttribute attr : entityAttributes){
		if("file".equals(attr.getType())){
			if(!attr.isDeleted()){
				if("Photos".equals(attr.getName())){
					specialFindpictures.add(attr.getText());
				}
			}
		}
	}
    populateCameraPictureGallery("specialFind/findDetail/PhotoGallery", specialFindpictures);
}

loadLichen() {

	lichen_id = getFieldValue("control/data/lichenList");
	
	if (lichen_id == null || "".equals(lichen_id)) return;
	newLichen();
	
	showTabGroup("lichen", lichen_id);
	loadLichenFileAttributes(lichen_id);
}

loadLichenFileAttributes(id){
	lichenpictures = new ArrayList();
	archEntity = fetchArchEnt(id);
	entityAttributes = archEntity.getAttributes();
	for(EntityAttribute attr : entityAttributes){
		if("file".equals(attr.getType())){
			if(!attr.isDeleted()){
				if("Photos".equals(attr.getName())){
					lichenpictures.add(attr.getText());
				}
			}
		}
	}
    populateCameraPictureGallery("lichen/lichenDetail/PhotoGallery", lichenpictures);
}

loadSurfaceCollection() {

	surface_collection_id = getFieldValue("control/data/surfaceCollectionList");
	
	if (surface_collection_id == null || "".equals(surface_collection_id)) return;
	newSurfaceCollection();
	
	showTabGroup("surfaceCollection", surface_collection_id);
}

loadLot() {

	lot_id = getFieldValue("control/data/lotList");
	
	if (lot_id == null || "".equals(lot_id)) return;
	newLot();
	
	showTabGroup("lot", lot_id);
}

onEvent("control/data/structureLoad", "click", "loadStructure()");
onEvent("control/data/wallLoad", "click", "loadWall()");
onEvent("control/data/doorwayLoad", "click", "loadDoorway()");
onEvent("control/data/featureLoad", "click", "loadFeature()");
onEvent("control/data/specialFindLoad", "click", "loadSpecialFind()");
onEvent("control/data/lichenLoad", "click", "loadLichen()");
onEvent("control/data/surfaceCollectionLoad", "click", "loadSurfaceCollection()");
onEvent("control/data/lotLoad", "click", "loadLot()");
