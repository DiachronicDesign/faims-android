// USER

getDefaultUsersList() {
	users = fetchAll("select userid, fname ||' ' || lname from user");
	return users;
}

usersList = getDefaultUsersList();

populateListForUsers(){
	populateList("user/tab1/users", usersList);
}

login(){
	Object userResult = fetchOne("select userid, fname, lname, email from user where userid='" + getListItemValue() + "';");
	user = new User(userResult.get(0), userResult.get(1), userResult.get(2), userResult.get(3));
	setUser(user);
	showTabGroup("menu");
}

populateListForUsers();

onEvent("user/tab1/users", "click", "login()");

// CONTROLS

createOption(id, name) {
	ArrayList option = new ArrayList();
	option.add(id);
	option.add(name);
	return option;
}

options = new ArrayList();
options.add(createOption("entity", "Create Entity"));
options.add(createOption("relationship", "Create Relationship"));
options.add(createOption("add", "Add Relationship Member"));
options.add(createOption("controls", "Controls"));

populateList("menu/tab1/options", options);

onClickOption() {
	String value = getListItemValue();
	if ("entity".equals(value)) {
		showTabGroup("tabgroup1");
	} else if ("relationship".equals(value)) {
		showTabGroup("tabgroup2");
	} else if ("add".equals(value)) {
		showTabGroup("tabgroup4");
	} else {
		showTabGroup("tabgroup3");
	}
}

onEvent("menu/tab1/options", "click", "onClickOption()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
	setSyncEnabled(true);
	setFileSyncEnabled(true);
}

stopSync() {
	setSyncEnabled(false);
}

int entityCount;
int relCount;

init() {
    updateAll();
	startSync();
	entityCount = Integer.valueOf(fetchOne("select count(distinct(uuid)) from archentity;").get(0)) + 1;
	relCount = Integer.valueOf(fetchOne("select count(distinct(relationshipid)) from relationship;").get(0)) + 1;
}

cleanup() {
	stopSync();
}

onEvent("menu", "show", "init()"); 
onEvent("user", "show", "cleanup()");	
onEvent("tabgroup1", "show", "initEntity()");	
onEvent("tabgroup2", "show", "initRel()");	

onEvent("tabgroup3/tab1/start", "click", "setFileSyncEnabled(true)");
onEvent("tabgroup3/tab1/stop", "click", "setFileSyncEnabled(false)");

// ENTITY

Object locations = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';");
Object gallery = fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'gallery';");

String entity_id = null;

saveEntity() {
	updateEntity();
}

loadEntity() {
	clearEntity();

	entity_id = getFieldValue("tabgroup1/tab2/entities");
	if (isNull(entity_id)) return;
	
	showTabGroup("tabgroup1", entity_id);
}

updateEntity() {
	if (isNull(entity_id)) entity_id = null;

	entity_id = saveTabGroup("tabgroup1", entity_id);
}

clearEntity() {
	entity_id = null;
	
	newTab("tabgroup1/tab1");
	
	setFieldValue("tabgroup1/tab1/timestamp", getCurrentTime());
}

deleteEntity(){
	if (isNull(entity_id)) return;
	
	deleteArchEnt(entity_id);
	entity_id = null;
    
    cancelTabGroup("tabgroup1", false);
}

// RELATIONSHIPS

// ASSOCIATIONS



takePicture(String callback) {
	openCamera("OnPictureTaken()");
}

OnPictureTaken() {
	
}

takeVideo() {
	openVideo("OnVideoTaken()");
}

OnVideoTaken() {
	
}

recordAudio(){
	recordAudio("OnAudioRecorded()");
}

OnAudioRecorded(){
	
}

attachFile() {
	showFileBrowser("setFilename()");
}

setFilename() {
	
}



onEvent("tabgroup1/tab1/attachpicture", "click", "takePicture()");
onEvent("tabgroup1/tab1/attachvideo", "click", "takeVideo()");
onEvent("tabgroup1/tab1/attachaudio", "click", "recordAudio()");
onEvent("tabgroup1/tab1/attachfile", "click", "attachFile()");
onEvent("tabgroup1/tab1/viewattached", "click", "viewArchEntAttachedFiles(entity_id)");

onEvent("tabgroup1/tab1/save", "delayclick", "saveEntity()");
onEvent("tabgroup1/tab1/clear", "click", "clearEntity()");
onEvent("tabgroup1/tab2/load", "click", "loadEntity()");
onEvent("tabgroup1/tab1/delete", "click", "deleteEntity()");

initEntity() {
	clearEntity();
	populateCheckBoxGroup("tabgroup1/tab1/location", locations);
	populateHierarchicalDropDown("tabgroup1/tab1/type", "type");
	setFieldValue("tabgroup1/tab1/sync", "0");
}



onEvent("tabgroup4/tab1/add", "click", "onAddMember()");

onAddMember() {
	eid = getFieldValue("tabgroup4/tab1/entities");
	rid = getFieldValue("tabgroup4/tab1/relationships");
	if (eid == null || "".equals(eid) || rid == null || "".equals(rid)) return;
	
	verb = getFieldValue("tabgroup4/tab1/verb");
	
	addReln(eid, rid, verb);
	
	showToast("Added relationship member");
}

// MISC

isNull(value) {
	return value == null || "".equals(value);
}

convertPairsToList(pairs) {
	if (pairs == null) return new ArrayList();
	ArrayList list = new ArrayList();
	for (NameValuePair p : pairs) {
		list.add(p.getName());
	}
	return list;
}

convertListToPairs(list) {
	if (list == null) return new ArrayList();
	ArrayList pairs = new ArrayList();
	for (String s : list) {
		pairs.add(new NameValuePair(s, "true"));
	}
	return pairs;
}
