// USER

login(){
	Object userResult = fetchOne("select userid, fname, lname, email from user where userid='" + getListItemValue() + "';");
	user = new User(userResult.get(0), userResult.get(1), userResult.get(2), userResult.get(3));
	setUser(user);
	showTabGroup("menu");
}

onEvent("user/tab1/users", "click", "login()");

loadUsers() {
	Object usersList = fetchAll("select userid, fname ||' ' || lname from user");
	populateList("user/tab1/users", usersList);
}

onEvent("user", "show", "loadUsers()");

// CONTROLS

createOption(id, name) {
	ArrayList option = new ArrayList();
	option.add(id);
	option.add(name);
	return option;
}

options = new ArrayList();
options.add(createOption("entity", "Create Entity"));
options.add(createOption("relationship", "Create Relationship"));
options.add(createOption("add", "Add Association"));
options.add(createOption("controls", "Controls"));

populateList("menu/tab1/options", options);

onClickOption() {
	String value = getListItemValue();
	if ("entity".equals(value)) {
		showTabGroup("tabgroup1");
	} else if ("relationship".equals(value)) {
		showTabGroup("tabgroup2");
	} else if ("add".equals(value)) {
		showTabGroup("tabgroup4");
	} else {
		showTabGroup("tabgroup3");
	}
}

onEvent("menu/tab1/options", "click", "onClickOption()");

startSync() {
	setSyncEnabled(true);
	setFileSyncEnabled(true);
}

stopSync() {
	setSyncEnabled(false);
}

init() {
	setSyncMinInterval(10.0f);
	setSyncMaxInterval(20.0f);
	setSyncDelay(5.0f);
	startSync();
}

cleanup() {
	stopSync();
}

onEvent("menu", "show", "init()"); 
onEvent("user", "show", "cleanup()");

onEvent("tabgroup3/tab1/start", "click", "startSync()");
onEvent("tabgroup3/tab1/stop", "click", "stopSync()");

// ENTITY

String entity_id = null;

saveEntity() {
	updateEntity();
}

loadEntity() {
	clearEntity();

	entity_id = getFieldValue("tabgroup1/tab2/entities");
	
	if (isNull(entity_id)) return;
	
	showTab("tabgroup1/tab1", entity_id);
}

updateEntity() {
	if (isNull(entity_id)) entity_id = null;
	
	attributes = createAttributesList();
	entityCount = Integer.valueOf(fetchOne("select count(distinct(uuid)) from archentity;").get(0)) + 1;
	attributes.add(createEntityAttribute("entity", "Small " + entityCount, null, null, null));
	entity_id = saveTabGroup("tabgroup1", entity_id, null, attributes);
}

clearEntity() {
	entity_id = null;
	
	newTab("tabgroup1/tab1");
	
	Object locations = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';");
	populateCheckBoxGroup("tabgroup1/tab1/location", locations);
	
	populateHierarchicalDropDown("tabgroup1/tab1/type", "type");
	
	Object pictures = fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'gallery';");
	populatePictureGallery("tabgroup1/tab1/gallery", pictures);
	
	setFieldValue("tabgroup1/tab1/timestamp", getCurrentTime());
	setFieldValue("tabgroup1/tab1/sync", "0");
}

deleteEntity(){
	if (isNull(entity_id)) return;
	
	deleteArchEnt(entity_id);
	entity_id = null;
	
    cancelTabGroup("tabgroup1", false);
}

attachFileEntity() {
	showFileBrowser("OnFileAttachedEntity()");
}

OnFileAttachedEntity() {
	
}

takePictureEntity() {
	openCamera("OnPictureTakenEntity()");
}

OnPictureTakenEntity() {
	
}

takeVideoEntity() {
	openVideo("OnVideoTakenEntity()");
}

OnVideoTakenEntity() {
	
}

recordAudioEntity(){
	recordAudio("OnAudioRecordedEntity()");
}

OnAudioRecordedEntity(){
	
}

onEvent("tabgroup1/tab1/attachfile", "click", "attachFileEntity()");
onEvent("tabgroup1/tab1/attachpicture", "click", "takePictureEntity()");
onEvent("tabgroup1/tab1/attachvideo", "click", "takeVideoEntity()");
onEvent("tabgroup1/tab1/attachaudio", "click", "recordAudioEntity()");

onEvent("tabgroup1/tab1/viewattached", "click", "viewArchEntAttachedFiles(entity_id)");

onEvent("tabgroup1/tab1/save", "delayclick", "saveEntity()");
onEvent("tabgroup1/tab1/clear", "click", "clearEntity()");
onEvent("tabgroup1/tab2/load", "click", "loadEntity()");
onEvent("tabgroup1/tab1/delete", "click", "deleteEntity()");

closeEntity() {
	cancelTabGroup("tabgroup1", true);
}

onEvent("tabgroup1/tab1/close", "click", "closeEntity()");

initEntity() {
	clearEntity();
}

onEvent("tabgroup1", "show", "initEntity()");	

loadEntityTab() {
	Object entities = fetchEntityList("small");
	populateDropDown("tabgroup1/tab2/entities", entities);
}

onEvent("tabgroup1/tab2", "show", "loadEntityTab()");

// ASSOCIATIONS

loadMembers() {
	Object entities = fetchEntityList("small");
	populateDropDown("tabgroup1/tab2/entities", entities);
}

onEvent("tabgroup4", "show", "loadMembers()");

onEvent("tabgroup4/tab1/add", "click", "onAddMember()");

onAddMember() {
	eid = getFieldValue("tabgroup4/tab1/entities");
	rid = getFieldValue("tabgroup4/tab1/relationships");
	if (eid == null || "".equals(eid) || rid == null || "".equals(rid)) return;
	
	verb = getFieldValue("tabgroup4/tab1/verb");
	
	addReln(eid, rid, verb);
	
	showToast("Added relationship member");
}

// MISC

convertPairsToList(pairs) {
	if (pairs == null) return new ArrayList();
	ArrayList list = new ArrayList();
	for (NameValuePair p : pairs) {
		list.add(p.getName());
	}
	return list;
}

convertListToPairs(list) {
	if (list == null) return new ArrayList();
	ArrayList pairs = new ArrayList();
	for (String s : list) {
		pairs.add(new NameValuePair(s, "true"));
	}
	return pairs;
}

isNull(value) {
	return value == null || "".equals(value);
}