createUser(id, firstname, lastname) {
	user = new User(id, firstname, lastname);
	return user;
}

toUsersList(users) {
	users_array = new ArrayList();
	for (User user : users) {
		ua = new ArrayList();
		ua.add(user.getUserId());
		ua.add(user.getFirstName() + " " + user.getLastName());
		users_array.add(ua);
	}
	return users_array;
}

getDefaultUsersList() {
	users = new ArrayList();
	users.add(createUser("1", "Test", "User 1"));
	users.add(createUser("2", "Test", "User 2"));
	users.add(createUser("3", "Test", "User 3"));
	users.add(createUser("4", "Test", "User 4"));
	users.add(createUser("5", "Test", "User 5"));
	return users;
}

usersList = getDefaultUsersList();

populateListForUsers(){
	populateList("user/tab1/users", toUsersList(usersList));
}

login(){
	User user = (User) usersList.get(Integer.parseInt(getListItemValue())-1);
	
	setUser(user);
	showTabGroup("tabgroup1");
}

populateListForUsers();

onEvent("user/tab1/users", "click", "login()");

Object types = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'type';");
Object locations = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';");
Object pictures = fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'picture';");

String entity_id;

initialise() {
	updateEntities();
	setFieldValue("tabgroup1/tab1/time", getCurrentTime());
	populateDropDown("tabgroup1/tab1/type", types);
	populateCheckBoxGroup("tabgroup1/tab2/location", locations);
	populatePictureGallery("tabgroup1/tab1/picture", pictures);
}

saveEntity() {
	
	entity_id = updateEntity(null);
	
}

updateEntity(entity_id) {
	if (entity_id == null || "".equals(entity_id)) entity_id = null;
	
	List attributes = createAttributeList();
	attributes.add(createEntityAttribute("name", getFieldValue("tabgroup1/tab1/name"), null, null, getFieldCertainty("tabgroup1/tab1/name")));
	attributes.add(createEntityAttribute("timestamp", getFieldValue("tabgroup1/tab1/time"), null, null, null));
	attributes.add(createEntityAttribute("type", getFieldAnnotation("tabgroup1/tab1/type"), getFieldValue("tabgroup1/tab1/type"), null, getFieldCertainty("tabgroup1/tab1/type")));
	attributes.add(createEntityAttribute("picture", getFieldAnnotation("tabgroup1/tab1/picture"), getFieldValue("tabgroup1/tab1/picture"), null, getFieldCertainty("tabgroup1/tab1/picture")));
	
	Object values = getFieldValue("tabgroup1/tab2/location");
	
	for (Object value : values) {
		attributes.add(createEntityAttribute("location", getFieldAnnotation("tabgroup1/tab2/location"), value.getName(), null, getFieldCertainty("tabgroup1/tab2/location")));
	}
	
	attributes.add(createEntityAttribute("supervisor", getFieldValue("tabgroup1/tab2/supervisor"), null, null, getFieldCertainty("tabgroup1/tab2/supervisor")));
	
	String id = saveArchEnt(entity_id, "simple", null, attributes);
	updateEntities();
	return id;
}

updateEntities() {
	Object entities = fetchAll("select uuid, uuid from archentity group by uuid;");

	populateDropDown("tabgroup1/tab3/entity", entities);
}

loadEntity() {
	String id = getFieldValue("tabgroup1/tab3/entity");
	if (id == null || "".equals(id)) return;
	showTabGroup("tabgroup1", id);
}

clearEntity() {
	newTabGroup("tabgroup1");
	setFieldValue("tabgroup1/tab1/time", getCurrentTime());
}

onEvent("tabgroup1", "load", "initialise()");
onEvent("tabgroup1/tab3/save", "click", "saveEntity()");
onEvent("tabgroup1/tab3/update", "click", "updateEntity(getFieldValue(\"tabgroup1/tab3/entity\"))");
onEvent("tabgroup1/tab3/load", "click", "loadEntity()");
onEvent("tabgroup1/tab3/clear", "click", "clearEntity()");
