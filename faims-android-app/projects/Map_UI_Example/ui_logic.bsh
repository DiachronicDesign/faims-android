createUser(id, firstname, lastname) {
	user = new User(id, firstname, lastname);
	return user;
}

toUsersList(users) {
	users_array = new ArrayList();
	for (User user : users) {
		ua = new ArrayList();
		ua.add(user.getUserId());
		ua.add(user.getFirstName() + " " + user.getLastName());
		users_array.add(ua);
	}
	return users_array;
}

getDefaultUsersList() {
	users = new ArrayList();
	users.add(createUser("1", "Test", "User 1"));
	users.add(createUser("2", "Test", "User 2"));
	users.add(createUser("3", "Test", "User 3"));
	users.add(createUser("4", "Test", "User 4"));
	users.add(createUser("5", "Test", "User 5"));
	return users;
}

usersList = getDefaultUsersList();

populateListForUsers(){
	populateList("user/tab1/users", toUsersList(usersList));
}

login(){
	User user = (User) usersList.get(Integer.parseInt(getListItemValue())-1);
	
	setUser(user);
	showMapTabGroup();
}

populateListForUsers();

onEvent("user/tab1/users", "click", "login()");

mapfilename = "files/data/maps/sydney_map.tif";

setupMap(id, lon, lat) {
	showRasterMap(id, "raster map", mapfilename);
	setMapFocusPoint(id, lon, lat);
	setMapRotation(id, 360.0f);
	setMapZoom(id, 15.0f);
	setMapTilt(id, 90.0f);
}

showMapTabGroup() {
	setupMap("tabgroup1/tab1/map", 151.26854f, -33.88190f); 
	showTabGroup("tabgroup1");
}

onEvent("tabgroup1/tab2/clear", "click", "clearEntity()");
onEvent("tabgroup1/tab2/save", "click", "saveEntity()");
onEvent("tabgroup1/tab2/update", "click", "updateEntity(getFieldValue(\"tabgroup1/tab2/entity\"))");
onEvent("tabgroup1/tab2/load", "click", "loadEntity()");

onEvent("tabgroup1/tab3/clear", "click", "clearRelationship()");
onEvent("tabgroup1/tab3/save", "click", "saveRelationship()");
onEvent("tabgroup1/tab3/update", "click", "updateRelationship(getFieldValue(\"tabgroup1/tab3/relationship\"))");
onEvent("tabgroup1/tab3/load", "click", "loadRelationship()");

refreshEntities() {
	Object entities = fetchAll("select uuid, uuid from archentity group by uuid;");
	
	populateDropDown("tabgroup1/tab2/entity", entities);
}

clearEntity() {
	setFieldValue("tabgroup1/tab2/name", "");
	setFieldValue("tabgroup1/tab2/value", "");
}

saveEntity() {
	updateEntity(null);
}

updateEntity(String entityId) {
	
	if (entityId == null || "".equals(entityId)) entityId = null;

	List attributes = createAttributeList();
	attributes.add(createEntityAttribute("name", getFieldValue("tabgroup1/tab2/name"), null, null, null));
	attributes.add(createEntityAttribute("value", null, null, getFieldValue("tabgroup1/tab2/value"), null));
	
	List collection = null;
	if (currentLayerId != 0) {
		collection = getGeometryList("tabgroup1/tab1/map", currentLayerId); 
		if (collection != null) {
			System.out.println(collection);
		}
	}
	
	String id = saveArchEnt(entityId, "simple", collection, attributes);
	
	refreshEntities();
	
	return id;
}

loadEntity() {
	
	entityId = getFieldValue("tabgroup1/tab2/entity");
	
	if (entityId == null || "".equals(entityId)) return;
	
	Object entity = fetchArchEnt(entityId);
	
	for (Object attribute : entity.getAttributes()) {
		System.out.println(attribute.toString());
		if ("name".equals(attribute.getName())) {
			setFieldValue("tabgroup1/tab2/name", attribute.getText());
		} else if ("value".equals(attribute.getName())) {
			setFieldValue("tabgroup1/tab2/value", attribute.getMeasure());
		}
	}
	
	drawGeometryList(entity.getGeometryList());
}

drawGeometryList(geometryList) {
	for (Geometry geom : geometryList) {
		if (geom instanceof Polygon) {
			drawGeometry("tabgroup1/tab1/map", currentLayerId, geom, polygonStyle(Color.BLUE, Color.BLACK));
		} else if (geom instanceof Line) {
			drawGeometry("tabgroup1/tab1/map", currentLayerId, geom, lineStyle(Color.GREEN));
		} else if (geom instanceof Point) {
			drawGeometry("tabgroup1/tab1/map", currentLayerId, geom, pointStyle(Color.RED));
		}
	}
}

refreshEntities();

refreshRelationships() {
	Object relationships = fetchAll("select relationshipid, relationshipid from relationship group by relationshipid;");
	
	populateDropDown("tabgroup1/tab3/relationship", relationships);
}

clearRelationship() {
	setFieldValue("tabgroup1/tab3/name", "");
}

saveRelationship() {
	updateRelationship(null);
}

updateRelationship(String relId) {
	
	if (relId == null || "".equals(relId)) relId = null;	

	List attributes = createAttributeList();
	attributes.add(createRelationshipAttribute("name", getFieldValue("tabgroup1/tab3/name"), null));
	
	List collection = null;
	if (currentLayerId != 0) {
		collection = getGeometryList("tabgroup1/tab1/map", currentLayerId); 
		if (collection != null) {
			System.out.println(collection);
		}
	}
	
	String id = saveRel(relId, "abovebelow", collection, attributes);
	
	refreshRelationships();
	
	return id;
}

loadRelationship() {
	
	relId = getFieldValue("tabgroup1/tab3/relationship");
	
	if (relId == null || "".equals(relId)) return;
	
	Object relationship = fetchRel(relId);
	
	for (Object attribute : relationship.getAttributes()) {
		System.out.println(attribute.toString());
		if ("name".equals(attribute.getName())) {
			setFieldValue("tabgroup1/tab3/name", attribute.getText());
		}
	}
	
	drawGeometryList(relationship.getGeometryList());
	
}

refreshRelationships();