createUser(id, firstname, lastname) {
	user = new User(id, firstname, lastname);
	return user;
}

toUsersList(users) {
	users_array = new ArrayList();
	for (User user : users) {
		ua = new ArrayList();
		ua.add(user.getUserId());
		ua.add(user.getFirstName() + " " + user.getLastName());
		users_array.add(ua);
	}
	return users_array;
}

getDefaultUsersList() {
	users = new ArrayList();
	users.add(createUser("1", "Test", "User 1"));
	users.add(createUser("2", "Test", "User 2"));
	users.add(createUser("3", "Test", "User 3"));
	users.add(createUser("4", "Test", "User 4"));
	users.add(createUser("5", "Test", "User 5"));
	return users;
}

usersList = getDefaultUsersList();

populateListForUsers(){
	populateList("user/tab1/users", toUsersList(usersList));
}

login(){
	User user = (User) usersList.get(Integer.parseInt(getListItemValue())-1);
	
	setUser(user);
	showTabGroup("tabgroup1");
}

populateListForUsers();

onEvent("user/tab1/users", "click", "login()");

mapfilename = "map.tif";

setupMap(id, lon, lat) {
	showRasterMap(id, mapfilename);
	setMapFocusPoint(id, lon, lat);
	setMapRotation(id, 360.0f);
	setMapZoom(id, 15.0f);
	setMapTilt(id, 90.0f);
}

showMapTab() {
	setupMap("tabgroup1/tab2/map", 151.26854f, -33.88190f); 
	showTab("tabgroup1/tab2");
	showTab("tabgroup1/tab3");
	clearMapTab();
}

showMapTabGroup() {
	setupMap("tabgroup2/tab1/map", 151.26854f, -33.88190f); 
	showTabGroup("tabgroup2");
	
	refreshLayers();
}

refreshMapTab() {
	showRasterMap("tabgroup1/tab2/map", mapfilename);
	addVectorLayers();
}

List layers = new ArrayList();
Integer pointLayerId;

clearMapTab() {
	for (Integer layerId : layers) {
		clearVectorLayer("tabgroup1/tab2/map", layerId);
	}
	layers = new ArrayList();
	
	pointLayerId = createVectorLayer("tabgroup1/tab2/map");
	layers.add(pointLayerId);
	
	clearTabEntity();
	
	loadedEntities = new ArrayList();
	loadedPoints = new ArrayList();
	
	bluePointId = 0;
}

showCurrentPositionTab(){
	centerOnCurrentPosition("tabgroup1/tab2/map");
}

refreshTabEntities() {
	Object entities = fetchAll("select uuid, uuid from archentity group by uuid;");
	
	populateDropDown("tabgroup1/tab3/entity", entities);
}

saveTabEntity() {

	collection = null;
	if (lastPointId != 0) {
		collection = new ArrayList();
		collection.add(getGeometry("tabgroup1/tab2/map", pointLayerId, lastPointId));
		
		// clear geometry
		clearGeometry("tabgroup1/tab2/map", pointLayerId, lastPointId);
		
		lastPointId = 0;
	} else {
		showWarning("Warning", "Please plot a point before saving entity");
		return;
	}

	List attributes = createAttributeList();
	attributes.add(createEntityAttribute("name", getFieldValue("tabgroup1/tab2/name"), null, null, null));
	
	String id = saveArchEnt(null, "simple", collection, attributes);
	
	refreshTabEntities();
	
	loadTabEntity(id);
}

loadedEntities = new ArrayList();
loadedPoints = new ArrayList();

loadTabEntity(id) {
	if (id == null) {
		entityId = getFieldValue("tabgroup1/tab3/entity");
	} else {
		entityId = id;
	}
	
	if (entityId == null || "".equals(entityId)) return;
	
	Object entity = fetchArchEnt(entityId);
	
	for (Object attribute : entity.getAttributes()) {
		System.out.println(attribute.toString());
		if ("name".equals(attribute.getName())) {
			setFieldValue("tabgroup1/tab2/name", attribute.getText());
		}
	}
	
	for (Object e : loadedEntities) {
		if (e.getId().equals(entityId)) {
			System.out.println("Entity already loaded");
			return;
		}
	}
	
	loadedEntities.add(entity);
	redrawEntities();
}

clearLoadedPoints() {
	for (Integer id : loadedPoints) {
		clearGeometry("tabgroup1/tab2/map", pointLayerId, id);
	}
	loadedPoints = new ArrayList();
}

redrawEntities() {
	clearLoadedPoints();
	
	for (Object entity : loadedEntities) {
		point = entity.getGeometryList().get(0);
		loadedPoints.add(drawGeometry("tabgroup1/tab2/map", pointLayerId, point, gpsPointStyle(Color.GREEN)));
	}
}

clearTabEntity() {
	setFieldValue("tabgroup1/tab2/name", "");
}

clearBluePoint() {
	if (bluePointId != 0) {
		clearGeometry("tabgroup1/tab2/map", pointLayerId, bluePointId);
		bluePointId = 0;
	}
}

onTabMapClick() {
	clearBluePoint();
}

bluePointId = 0;

onTabMapSelect() {
	clearBluePoint();
	
	selectedId = getMapGeometrySelected();
	
	System.out.println("Selected point is " + selectedId);
	
	for (int i = 0; i < loadedPoints.size(); i++) {
		id = loadedPoints.get(i);
		
		if (id == selectedId) {
			// load entity name
			Object entity = loadedEntities.get(i);
		
			for (Object attribute : entity.getAttributes()) {
				System.out.println(attribute.toString());
				if ("name".equals(attribute.getName())) {
					setFieldValue("tabgroup1/tab2/name", attribute.getText());
				}
			}
			
			point = getGeometry("tabgroup1/tab2/map", pointLayerId, id);
			bluePointId = drawGeometry("tabgroup1/tab2/map", pointLayerId, point, gpsPointStyle(Color.BLUE));
			break;
		}
	}
}

lastPointId = 0;

plotGPSPoint() {
	if (lastPointId != 0) {
		clearGeometry("tabgroup1/tab2/map", pointLayerId, lastPointId);
	}

	location = getGPSPosition();
	if (location == null) {
		showWarning("Logic Error", "No GPS Signal");
	} else {
		Object location = getGPSPosition();
		longitude = location.getLongitude();
		latitude = location.getLatitude();
		point = createPoint(longitude, latitude);
		//point = createPoint(151.26854f, -33.88190f);
		lastPointId = drawPoint("tabgroup1/tab2/map", pointLayerId, point, gpsPointStyle(Color.RED));
	}
}

refreshTabEntities();

onEvent("tabgroup1/tab2/plot", "click", "plotGPSPoint()");

onEvent("tabgroup1", "load", "setGPSUpdateInterval(4)");
onEvent("tabgroup1/tab1/show", "click", "showMapTab()");
onEvent("tabgroup1/tab1/new", "click", "showMapTabGroup()");
onEvent("tabgroup1/tab1/connectexternal", "click", "startExternalGPS()");
onEvent("tabgroup1/tab1/connectinternal", "click", "startInternalGPS()");
onEvent("tabgroup1/tab2/show", "click", "showCurrentPositionTab()");
onEvent("tabgroup1/tab2/refresh", "click", "refreshMapTab()");
onEvent("tabgroup1/tab2/clear", "click", "clearMapTab()");
onEvent("tabgroup1/tab2/save", "click", "saveTabEntity()");
onEvent("tabgroup1/tab3/load", "click", "loadTabEntity(null)");
onMapEvent("tabgroup1/tab2/map", "onTabMapClick()", "onTabMapSelect()");

onEvent("tabgroup2/tab1/drawActions", "click", "onChangeAction()");
onEvent("tabgroup2/tab1/layers", "click", "onChangeLayers()");
onEvent("tabgroup2/tab1/create", "click", "onDrawAction()");
onEvent("tabgroup2/tab1/generate", "click", "onGenerateGrid()");
onEvent("tabgroup2/tab1/layerActionBtn", "click", "onLayerAction()");
onMapEvent("tabgroup2/tab1/map", "onMapClick()", "onMapSelect()");

POINT = 1;
LINE = 2;
POLYGON = 3;
GRID = 4;
SELECT_SHAPE = 5;

gpsPointStyle(int color) {
	pointStyleSet = createStyleSet(10, createPointStyle(color, 0.3f, 0.5f));
	return pointStyleSet;	
}

pointStyle(int color) {
	pointStyleSet = createStyleSet(10, createPointStyle(color, 0.1f, 0.3f));
	addStyleToSet(pointStyleSet, 16, createPointStyle(color, 0.3f, 0.3f));
	return pointStyleSet;
}

lineStyle(int color) {
	lineStyleSet = createStyleSet(10, createLineStyle(color, 0.1f, 0.3f, null));
	addStyleToSet(lineStyleSet, 16, createLineStyle(color, 0.1f, 0.3f, createPointStyle(color, 0.3f, 0.3f)));
	return lineStyleSet;
}

polygonStyle(int color, int lineColor) {
	polygonStyleSet = createStyleSet(10, createPolygonStyle(color, null));
	addStyleToSet(polygonStyleSet, 16, createPolygonStyle(color, createLineStyle(lineColor, 0.1f, 0.3f, null)));
	return polygonStyleSet;
}

List canvasLayers = new ArrayList();
List points = new ArrayList();
List pointIds = new ArrayList();
int gridId = 0;
int tool = POINT;
int currentLayerId = 0;
int currentGeometryId = 0;

onGenerateGrid() {
	drawGrid("tabgroup2/tab1/map", currentLayerId, Color.YELLOW, 3, 5);
}

onMapSelect() {
	System.out.println("select");
	
	if (tool != SELECT_SHAPE) return;
	
	geomId = getMapGeometrySelected();
	System.out.println(geomId);
	
	if (currentGeometryId == geomId) return;
	currentGeometryId = geomId;
	
	drawGeometryOverlay("tabgroup2/tab1/map", currentGeometryId);
}

onMapClick() {
	System.out.println("click");

	if (currentGeometryId != 0){
		replaceGeometryOverlay("tabgroup2/tab1/map", currentGeometryId);
		clearGeometryOverlay("tabgroup2/tab1/map");
		currentGeometryId = 0;
	}

	if (currentLayerId == 0) {
		showWarning("Logic Error", "No layer selected");
		return;
	}
	
	switch(tool) {
		case POINT:
			point = getMapPointClicked();
			drawPoint("tabgroup2/tab1/map", currentLayerId, point, pointStyle(Color.RED));
		break;
		case LINE:
			point = getMapPointClicked();
			points.add(point);
			pointIds.add(new Integer(drawPoint("tabgroup2/tab1/map", currentLayerId, point, pointStyle(Color.GREEN))));
		break;
		case POLYGON:
			point = getMapPointClicked();
			points.add(point);
			pointIds.add(new Integer(drawPoint("tabgroup2/tab1/map", currentLayerId, point, pointStyle(Color.BLUE))));
		break;
		case GRID:
			point = getMapPointClicked();
			points.add(point);
			pointIds.add(new Integer(drawPoint("tabgroup2/tab1/map", currentLayerId, point, pointStyle(Color.YELLOW))));
		break;
	}
}

refreshLayers() {
	
	populateDropDown("tabgroup2/tab1/layers", canvasLayers);
	
	// check if current layer exists and set to that layer
	if (canvasLayers.indexOf(String.valueOf(currentLayerId)) >= 0) {
		setFieldValue("tabgroup2/tab1/layers", String.valueOf(currentLayerId));
	} else {
		currentLayerId = 0;
		onChangeLayers();
	}
}

drawBox(map, layer, p1, p2, color) {
	List pts = new ArrayList();
	pts.add(createPoint(p1.x, p1.y));
	pts.add(createPoint(p2.x, p1.y));
	pts.add(createPoint(p2.x, p2.y));
	pts.add(createPoint(p1.x, p2.y));
	pts.add(createPoint(p1.x, p1.y));
	drawLine(map, layer, pts, lineStyle(color));
}

drawLine(map, layer, p1, p2, color) {
	List pts = new ArrayList();
	pts.add(p1);
	pts.add(p2);
	drawLine(map, layer, pts, lineStyle(color));
}

drawGrid(map, layer, color, cols, rows) {

	if (gridId == 0) {
		showWarning("Logic Error", "Cannot create grid.");
		return;
	}
	
	polygon = getGeometry(map, layer, gridId);
	pts = polygon.getVertexList();
	
	p1 = pts.get(0);
	p2 = pts.get(2);
	
	// draw a box
	drawBox(map, layer, p1, p2, color);
	
	// draw grid
	for (i = 1; i < cols; i++) {
		t = p1.x + (p2.x - p1.x) * ((float) i / cols);
		drawLine(map, layer, createPoint(t, p1.y), createPoint(t, p2.y), color);
	}
	
	for (i = 1; i < rows; i++) {
		t = p1.y + (p2.y - p1.y) * ((float) i / rows);
		drawLine(map, layer, createPoint(p1.x, t), createPoint(p2.x, t), color);
	}

	clearGeometry(map, layer, gridId);
	gridId = 0;
}

createShape() {
	
	switch(tool) {
		case LINE:
			if (currentLayerId == 0) {
				showWarning("Logic Error", "No layer selected");
				return;
			}
			
			drawLine("tabgroup2/tab1/map", currentLayerId, points, lineStyle(Color.GREEN));
			clearPoints();
		break;
		case POLYGON:
			if (currentLayerId == 0) {
				showWarning("Logic Error", "No layer selected");
				return;
			}
			
			drawPolygon("tabgroup2/tab1/map", currentLayerId, points, polygonStyle(Color.BLUE, Color.BLACK));
			clearPoints();
		break;
		case GRID:
			if (currentLayerId == 0) {
				showWarning("Logic Error", "No layer selected");
				return;
			}
			
			if (points.size() != 2) {
				showWarning("Logic Error", "Cannot create grid.");
				return;
			}
			
			p1 = points.get(0);
			p2 = points.get(1);
			
			List pts = new ArrayList();
			pts.add(createPoint(p1.x, p1.y));
			pts.add(createPoint(p2.x, p1.y));
			pts.add(createPoint(p2.x, p2.y));
			pts.add(createPoint(p1.x, p2.y));
			
			gridId = drawPolygon("tabgroup2/tab1/map", currentLayerId, pts, polygonStyle(Color.YELLOW, Color.BLACK));
			clearPoints();
		break;
	}
	
}

clearPoints() {
	//System.out.println("layer: " + String.valueOf(currentLayerId));
	//System.out.println(pointIds.toString());
	
	if (currentLayerId != 0) clearGeometryList("tabgroup2/tab1/map", currentLayerId, pointIds);
	
	points = new ArrayList();
	pointIds = new ArrayList();
}

onChangeLayers() {
	if (getFieldValue("tabgroup2/tab1/layers") == "") {
		layerId = 0;
	} else {
		layerId = Integer.valueOf(getFieldValue("tabgroup2/tab1/layers")).intValue();
	}
	if (layerId == 0 || layerId != currentLayerId) {
		clearPoints();
		currentLayerId = layerId;
	}
}

onChangeAction() {
	action = getFieldValue("tabgroup2/tab1/drawActions");
	if ("draw_point".equals(action)) {
		lockMapView("tabgroup2/tab1/map", false);
		if (tool != POINT) clearPoints();
		tool = POINT;
	} else if ("draw_line".equals(action)) {
		lockMapView("tabgroup2/tab1/map", false);
		if (tool != LINE) clearPoints();
		tool = LINE;
	} else if ("draw_polygon".equals(action)) {
		lockMapView("tabgroup2/tab1/map", false);
		if (tool != POLYGON) clearPoints();
		tool = POLYGON;
	} else if ("select_shape".equals(action)) {
		lockMapView("tabgroup2/tab1/map", true);
		if (tool != SELECT_SHAPE) clearPoints();
		tool = SELECT_SHAPE;
	} else if ("draw_grid".equals(action)) {
		lockMapView("tabgroup2/tab1/map", false);
		if (tool != GRID) clearPoints();
		tool = GRID;
	}
}

onDrawAction() {
	createShape();
}

onLayerAction() {
	action = getFieldValue("tabgroup2/tab1/layerActions");
	
	if ("create_layer".equals(action)) {
		canvasLayers.add(String.valueOf(createVectorLayer("tabgroup2/tab1/map")));
		refreshLayers();
	} else if ("clear_layer".equals(action)) {
		if (currentLayerId == 0) return;
		clearVectorLayer("tabgroup2/tab1/map", currentLayerId);
		canvasLayers.remove(String.valueOf(currentLayerId));
		refreshLayers();
	} else if ("hide_layer".equals(action)) {
		if (currentLayerId == 0) return;
		setVectorLayerVisible("tabgroup2/tab1/map", currentLayerId, false);
	} else if ("show_layer".equals(action)) {
		if (currentLayerId == 0) return;
		setVectorLayerVisible("tabgroup2/tab1/map", currentLayerId, true);
	}
	
}

canvasLayers.add(String.valueOf(createVectorLayer("tabgroup2/tab1/map")));
refreshLayers();

drawGeometryList(geometryList) {
	for (Geometry geom : geometryList) {
		if (geom instanceof Polygon) {
			drawGeometry("tabgroup2/tab1/map", currentLayerId, geom, polygonStyle(Color.BLUE, Color.BLACK));
		} else if (geom instanceof Line) {
			drawGeometry("tabgroup2/tab1/map", currentLayerId, geom, lineStyle(Color.GREEN));
		} else if (geom instanceof Point) {
			drawGeometry("tabgroup2/tab1/map", currentLayerId, geom, pointStyle(Color.RED));
		}
	}
}